
package com.example.states;

import net.corda.core.contracts.BelongsToContract;
import net.corda.core.contracts.ContractState;
import net.corda.core.identity.AbstractParty;
import net.corda.core.identity.Party;
import net.corda.core.serialization.CordaSerializable;


/**
 * A simple state object example
 */

@CordaSerializable
@BelongsToContract(ExampleContract.class)
public class ExampleState implements ContractState {
    private final String data;
    private final Party participant;
    
     public ExampleState(String data, Party participant) {
        this.data = data;
        this.participant = participant;
    }
    
     public String getData() {
        return data;
    }
    
     public Party getParticipant() {
        return participant;
    }
    
    
     @Override
    public List<AbstractParty> getParticipants() {
        return ImmutableList.of(participant);
    }
    
    }
    
    /*
    In this code, I created a state class named ExampleState. 
    It contains two properties named data and participant. 
    The data property is of type String and contains the data to be moved in the state object, 
    while the participant property is of type Party and represents one of the parties owning the state object. 
    Also, the ExampleState class implements the ContractState interface and implements the getParticipants() method, returning the sides this state has.
    */
